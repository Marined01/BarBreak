<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ErrorOr</name>
    </assembly>
    <members>
        <member name="T:ErrorOr.Error">
            <summary>
            Represents an error.
            </summary>
        </member>
        <member name="P:ErrorOr.Error.Code">
            <summary>
            Gets the unique error code.
            </summary>
        </member>
        <member name="P:ErrorOr.Error.Description">
            <summary>
            Gets the error description.
            </summary>
        </member>
        <member name="P:ErrorOr.Error.Type">
            <summary>
            Gets the error type.
            </summary>
        </member>
        <member name="P:ErrorOr.Error.NumericType">
            <summary>
            Gets the numeric value of the type.
            </summary>
        </member>
        <member name="P:ErrorOr.Error.Metadata">
            <summary>
            Gets the metadata.
            </summary>
        </member>
        <member name="M:ErrorOr.Error.Failure(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an <see cref="T:ErrorOr.Error"/> of type <see cref="F:ErrorOr.ErrorType.Failure"/> from a code and description.
            </summary>
            <param name="code">The unique error code.</param>
            <param name="description">The error description.</param>
            <param name="metadata">A dictionary which provides optional space for information.</param>
        </member>
        <member name="M:ErrorOr.Error.Unexpected(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an <see cref="T:ErrorOr.Error"/> of type <see cref="F:ErrorOr.ErrorType.Unexpected"/> from a code and description.
            </summary>
            <param name="code">The unique error code.</param>
            <param name="description">The error description.</param>
            <param name="metadata">A dictionary which provides optional space for information.</param>
        </member>
        <member name="M:ErrorOr.Error.Validation(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an <see cref="T:ErrorOr.Error"/> of type <see cref="F:ErrorOr.ErrorType.Validation"/> from a code and description.
            </summary>
            <param name="code">The unique error code.</param>
            <param name="description">The error description.</param>
            <param name="metadata">A dictionary which provides optional space for information.</param>
        </member>
        <member name="M:ErrorOr.Error.Conflict(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an <see cref="T:ErrorOr.Error"/> of type <see cref="F:ErrorOr.ErrorType.Conflict"/> from a code and description.
            </summary>
            <param name="code">The unique error code.</param>
            <param name="description">The error description.</param>
            <param name="metadata">A dictionary which provides optional space for information.</param>
        </member>
        <member name="M:ErrorOr.Error.NotFound(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an <see cref="T:ErrorOr.Error"/> of type <see cref="F:ErrorOr.ErrorType.NotFound"/> from a code and description.
            </summary>
            <param name="code">The unique error code.</param>
            <param name="description">The error description.</param>
            <param name="metadata">A dictionary which provides optional space for information.</param>
        </member>
        <member name="M:ErrorOr.Error.Unauthorized(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an <see cref="T:ErrorOr.Error"/> of type <see cref="F:ErrorOr.ErrorType.Unauthorized"/> from a code and description.
            </summary>
            <param name="code">The unique error code.</param>
            <param name="description">The error description.</param>
            <param name="metadata">A dictionary which provides optional space for information.</param>
        </member>
        <member name="M:ErrorOr.Error.Forbidden(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an <see cref="T:ErrorOr.Error"/> of type <see cref="F:ErrorOr.ErrorType.Forbidden"/> from a code and description.
            </summary>
            <param name="code">The unique error code.</param>
            <param name="description">The error description.</param>
            <param name="metadata">A dictionary which provides optional space for information.</param>
        </member>
        <member name="M:ErrorOr.Error.Custom(System.Int32,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Creates an <see cref="T:ErrorOr.Error"/> with the given numeric <paramref name="type"/>,
            <paramref name="code"/>, and <paramref name="description"/>.
            </summary>
            <param name="type">An integer value which represents the type of error that occurred.</param>
            <param name="code">The unique error code.</param>
            <param name="description">The error description.</param>
            <param name="metadata">A dictionary which provides optional space for information.</param>
        </member>
        <member name="T:ErrorOr.ErrorOr`1">
            <summary>
            A discriminated union of errors or a value.
            </summary>
            <summary>
            A discriminated union of errors or a value.
            </summary>
            <summary>
            A discriminated union of errors or a value.
            </summary>
            <summary>
            A discriminated union of errors or a value.
            </summary>
            <summary>
            A discriminated union of errors or a value.
            </summary>
            <summary>
            A discriminated union of errors or a value.
            </summary>
            <summary>
            A discriminated union of errors or a value.
            </summary>
        </member>
        <member name="P:ErrorOr.ErrorOr`1.IsError">
            <summary>
            Gets a value indicating whether the state is error.
            </summary>
        </member>
        <member name="P:ErrorOr.ErrorOr`1.Errors">
            <summary>
            Gets the list of errors. If the state is not error, the list will contain a single error representing the state.
            </summary>
        </member>
        <member name="P:ErrorOr.ErrorOr`1.ErrorsOrEmptyList">
            <summary>
            Gets the list of errors. If the state is not error, the list will be empty.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.From(System.Collections.Generic.List{ErrorOr.Error})">
            <summary>
            Creates an <see cref="T:ErrorOr.ErrorOr`1"/> from a list of errors.
            </summary>
        </member>
        <member name="P:ErrorOr.ErrorOr`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="P:ErrorOr.ErrorOr`1.FirstError">
            <summary>
            Gets the first error.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Else(System.Func{System.Collections.Generic.List{ErrorOr.Error},ErrorOr.Error})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed and its result is returned.
            </summary>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Value"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Else(System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Collections.Generic.List{ErrorOr.Error}})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed and its result is returned.
            </summary>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Value"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Else(ErrorOr.Error)">
            <summary>
            If the state is error, the provided <paramref name="error"/> is returned.
            </summary>
            <param name="error">The error to return.</param>
            <returns>The given <paramref name="error"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Else(System.Func{System.Collections.Generic.List{ErrorOr.Error},`0})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed and its result is returned.
            </summary>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Value"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Else(`0)">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed and its result is returned.
            </summary>
            <param name="onError">The value to return if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Value"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ElseAsync(System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task{`0}})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Value"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ElseAsync(System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task{ErrorOr.Error}})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Value"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ElseAsync(System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task{System.Collections.Generic.List{ErrorOr.Error}}})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Value"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ElseAsync(System.Threading.Tasks.Task{ErrorOr.Error})">
            <summary>
            If the state is error, the provided <paramref name="error"/> is awaited and returned.
            </summary>
            <param name="error">The error to return if the state is error.</param>
            <returns>The result from awaiting the given <paramref name="error"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ElseAsync(System.Threading.Tasks.Task{`0})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Value"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.FailIf(System.Func{`0,System.Boolean},ErrorOr.Error)">
            <summary>
            If the state is error, the provided function <paramref name="onValue"/> is executed and its result is returned.
            </summary>
            <param name="onValue">The function to execute if the state is value.</param>
            <param name="error">The <see cref="T:ErrorOr.Error"/> to return if the given <paramref name="onValue"/> function returned true..</param>
            <returns>The given <paramref name="error"/> if <paramref name="onValue"/> returns true; otherwise, the original <see cref="N:ErrorOr"/> instance.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.op_Implicit(`0)~ErrorOr.ErrorOr{`0}">
            <summary>
            Creates an <see cref="T:ErrorOr.ErrorOr`1"/> from a value.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.op_Implicit(ErrorOr.Error)~ErrorOr.ErrorOr{`0}">
            <summary>
            Creates an <see cref="T:ErrorOr.ErrorOr`1"/> from an error.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.op_Implicit(System.Collections.Generic.List{ErrorOr.Error})~ErrorOr.ErrorOr{`0}">
            <summary>
            Creates an <see cref="T:ErrorOr.ErrorOr`1"/> from a list of errors.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.op_Implicit(ErrorOr.Error[])~ErrorOr.ErrorOr{`0}">
            <summary>
            Creates an <see cref="T:ErrorOr.ErrorOr`1"/> from a list of errors.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Match``1(System.Func{`0,``0},System.Func{System.Collections.Generic.List{ErrorOr.Error},``0})">
            <summary>
            Executes the appropriate function based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is a value, the provided function <paramref name="onValue"/> is executed and its result is returned.
            If the state is an error, the provided function <paramref name="onError"/> is executed and its result is returned.
            </summary>
            <typeparam name="TNextValue">The type of the result.</typeparam>
            <param name="onValue">The function to execute if the state is a value.</param>
            <param name="onError">The function to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.MatchAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously executes the appropriate function based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is a value, the provided function <paramref name="onValue"/> is executed asynchronously and its result is returned.
            If the state is an error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TNextValue">The type of the result.</typeparam>
            <param name="onValue">The asynchronous function to execute if the state is a value.</param>
            <param name="onError">The asynchronous function to execute if the state is an error.</param>
            <returns>A task representing the asynchronous operation that yields the result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.MatchFirst``1(System.Func{`0,``0},System.Func{ErrorOr.Error,``0})">
            <summary>
            Executes the appropriate function based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is a value, the provided function <paramref name="onValue"/> is executed and its result is returned.
            If the state is an error, the provided function <paramref name="onFirstError"/> is executed using the first error, and its result is returned.
            </summary>
            <typeparam name="TNextValue">The type of the result.</typeparam>
            <param name="onValue">The function to execute if the state is a value.</param>
            <param name="onFirstError">The function to execute with the first error if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.MatchFirstAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Func{ErrorOr.Error,System.Threading.Tasks.Task{``0}})">
            <summary>
            Asynchronously executes the appropriate function based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is a value, the provided function <paramref name="onValue"/> is executed asynchronously and its result is returned.
            If the state is an error, the provided function <paramref name="onFirstError"/> is executed asynchronously using the first error, and its result is returned.
            </summary>
            <typeparam name="TNextValue">The type of the result.</typeparam>
            <param name="onValue">The asynchronous function to execute if the state is a value.</param>
            <param name="onFirstError">The asynchronous function to execute with the first error if the state is an error.</param>
            <returns>A task representing the asynchronous operation that yields the result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Switch(System.Action{`0},System.Action{System.Collections.Generic.List{ErrorOr.Error}})">
            <summary>
            Executes the appropriate action based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is an error, the provided action <paramref name="onError"/> is executed.
            If the state is a value, the provided action <paramref name="onValue"/> is executed.
            </summary>
            <param name="onValue">The action to execute if the state is a value.</param>
            <param name="onError">The action to execute if the state is an error.</param>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.SwitchAsync(System.Func{`0,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task})">
            <summary>
            Asynchronously executes the appropriate action based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is an error, the provided action <paramref name="onError"/> is executed asynchronously.
            If the state is a value, the provided action <paramref name="onValue"/> is executed asynchronously.
            </summary>
            <param name="onValue">The asynchronous action to execute if the state is a value.</param>
            <param name="onError">The asynchronous action to execute if the state is an error.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.SwitchFirst(System.Action{`0},System.Action{ErrorOr.Error})">
            <summary>
            Executes the appropriate action based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is an error, the provided action <paramref name="onFirstError"/> is executed using the first error as input.
            If the state is a value, the provided action <paramref name="onValue"/> is executed.
            </summary>
            <param name="onValue">The action to execute if the state is a value.</param>
            <param name="onFirstError">The action to execute with the first error if the state is an error.</param>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.SwitchFirstAsync(System.Func{`0,System.Threading.Tasks.Task},System.Func{ErrorOr.Error,System.Threading.Tasks.Task})">
            <summary>
            Asynchronously executes the appropriate action based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is an error, the provided action <paramref name="onFirstError"/> is executed asynchronously using the first error as input.
            If the state is a value, the provided action <paramref name="onValue"/> is executed asynchronously.
            </summary>
            <param name="onValue">The asynchronous action to execute if the state is a value.</param>
            <param name="onFirstError">The asynchronous action to execute with the first error if the state is an error.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Then``1(System.Func{`0,ErrorOr.ErrorOr{``0}})">
            <summary>
            If the state is a value, the provided function <paramref name="onValue"/> is executed and its result is returned.
            </summary>
            <typeparam name="TNextValue">The type of the result.</typeparam>
            <param name="onValue">The function to execute if the state is a value.</param>
            <returns>The result from calling <paramref name="onValue"/> if state is value; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Errors"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ThenDo(System.Action{`0})">
            <summary>
            If the state is a value, the provided <paramref name="action"/> is invoked.
            </summary>
            <param name="action">The action to execute if the state is a value.</param>
            <returns>The original <see cref="N:ErrorOr"/> instance.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.Then``1(System.Func{`0,``0})">
            <summary>
            If the state is a value, the provided function <paramref name="onValue"/> is executed and its result is returned.
            </summary>
            <typeparam name="TNextValue">The type of the result.</typeparam>
            <param name="onValue">The function to execute if the state is a value.</param>
            <returns>The result from calling <paramref name="onValue"/> if state is value; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Errors"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ThenAsync``1(System.Func{`0,System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}}})">
            <summary>
            If the state is a value, the provided function <paramref name="onValue"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TNextValue">The type of the result.</typeparam>
            <param name="onValue">The function to execute if the state is a value.</param>
            <returns>The result from calling <paramref name="onValue"/> if state is value; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Errors"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ThenDoAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            If the state is a value, the provided <paramref name="action"/> is invoked asynchronously.
            </summary>
            <param name="action">The action to execute if the state is a value.</param>
            <returns>The original <see cref="N:ErrorOr"/> instance.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOr`1.ThenAsync``1(System.Func{`0,System.Threading.Tasks.Task{``0}})">
            <summary>
            If the state is a value, the provided function <paramref name="onValue"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TNextValue">The type of the result.</typeparam>
            <param name="onValue">The function to execute if the state is a value.</param>
            <returns>The result from calling <paramref name="onValue"/> if state is value; otherwise the original <see cref="P:ErrorOr.ErrorOr`1.Errors"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Else``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{System.Collections.Generic.List{ErrorOr.Error},``0})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Else``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},``0)">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ElseAsync``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task{``0}})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ElseAsync``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Threading.Tasks.Task{``0})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Else``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{System.Collections.Generic.List{ErrorOr.Error},ErrorOr.Error})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Else``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Collections.Generic.List{ErrorOr.Error}})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Else``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},ErrorOr.Error)">
            <summary>
            If the state is error, the provided <paramref name="error"/> is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="error">The error to return.</param>
            <returns>The given <paramref name="error"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ElseAsync``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task{ErrorOr.Error}})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ElseAsync``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task{System.Collections.Generic.List{ErrorOr.Error}}})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ElseAsync``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Threading.Tasks.Task{ErrorOr.Error})">
            <summary>
            If the state is error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onError">The function to execute if the state is error.</param>
            <returns>The result from calling <paramref name="onError"/> if state is error; otherwise the original value.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Match``2(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,``1},System.Func{System.Collections.Generic.List{ErrorOr.Error},``1})">
            <summary>
            Executes the appropriate function based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is a value, the provided function <paramref name="onValue"/> is executed and its result is returned.
            If the state is an error, the provided function <paramref name="onError"/> is executed and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <typeparam name="TNextValue">The type of the result from invoking the <paramref name="onError"/> and <paramref name="onValue"/> functions.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The function to execute if the state is a value.</param>
            <param name="onError">The function to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.MatchAsync``2(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task{``1}})">
            <summary>
            Asynchronously executes the appropriate function based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is a value, the provided function <paramref name="onValue"/> is executed asynchronously and its result is returned.
            If the state is an error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <typeparam name="TNextValue">The type of the result from invoking the <paramref name="onError"/> and <paramref name="onValue"/> functions.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The function to execute if the state is a value.</param>
            <param name="onError">The function to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.MatchFirst``2(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,``1},System.Func{ErrorOr.Error,``1})">
            <summary>
            Executes the appropriate function based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is a value, the provided function <paramref name="onValue"/> is executed and its result is returned.
            If the state is an error, the provided function <paramref name="onError"/> is executed and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <typeparam name="TNextValue">The type of the result from invoking the <paramref name="onError"/> and <paramref name="onValue"/> functions.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The function to execute if the state is a value.</param>
            <param name="onError">The function to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.MatchFirstAsync``2(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{ErrorOr.Error,System.Threading.Tasks.Task{``1}})">
            <summary>
            Asynchronously executes the appropriate function based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is a value, the provided function <paramref name="onValue"/> is executed asynchronously and its result is returned.
            If the state is an error, the provided function <paramref name="onError"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <typeparam name="TNextValue">The type of the result from invoking the <paramref name="onError"/> and <paramref name="onValue"/> functions.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The function to execute if the state is a value.</param>
            <param name="onError">The function to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Switch``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Action{``0},System.Action{System.Collections.Generic.List{ErrorOr.Error}})">
            <summary>
            Executes the appropriate action based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is an error, the provided action <paramref name="onError"/> is executed.
            If the state is a value, the provided action <paramref name="onValue"/> is executed.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The action to execute if the state is a value.</param>
            <param name="onError">The action to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.SwitchAsync``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,System.Threading.Tasks.Task},System.Func{System.Collections.Generic.List{ErrorOr.Error},System.Threading.Tasks.Task})">
            <summary>
            Executes the appropriate action based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is an error, the provided action <paramref name="onError"/> is executed.
            If the state is a value, the provided action <paramref name="onValue"/> is executed.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The action to execute if the state is a value.</param>
            <param name="onError">The action to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.SwitchFirst``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Action{``0},System.Action{ErrorOr.Error})">
            <summary>
            Executes the appropriate action based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is an error, the provided action <paramref name="onError"/> is executed.
            If the state is a value, the provided action <paramref name="onValue"/> is executed.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The action to execute if the state is a value.</param>
            <param name="onError">The action to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.SwitchFirstAsync``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,System.Threading.Tasks.Task},System.Func{ErrorOr.Error,System.Threading.Tasks.Task})">
            <summary>
            Executes the appropriate action based on the state of the <see cref="T:ErrorOr.ErrorOr`1"/>.
            If the state is an error, the provided action <paramref name="onError"/> is executed.
            If the state is a value, the provided action <paramref name="onValue"/> is executed.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The action to execute if the state is a value.</param>
            <param name="onError">The action to execute if the state is an error.</param>
            <returns>The result of the executed function.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Then``2(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,ErrorOr.ErrorOr{``1}})">
            <summary>
            If the state of <paramref name="errorOr"/> is a value, the provided function <paramref name="onValue"/> is executed and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <typeparam name="TNextValue">The type of the result from invoking the <paramref name="onValue"/> function.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The function to execute if the state is a value.</param>
            <returns>The result from calling <paramref name="onValue"/> if state is value; otherwise the original errors.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.Then``2(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,``1})">
            <summary>
            If the state of <paramref name="errorOr"/> is a value, the provided function <paramref name="onValue"/> is executed and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <typeparam name="TNextValue">The type of the result from invoking the <paramref name="onValue"/> function.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The function to execute if the state is a value.</param>
            <returns>The result from calling <paramref name="onValue"/> if state is value; otherwise the original errors.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ThenDo``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Action{``0})">
            <summary>
            If the state of <paramref name="errorOr"/> is a value, the provided <paramref name="action"/> is invoked.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="action">The action to execute if the state is a value.</param>
            <returns>The original <paramref name="errorOr"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ThenAsync``2(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,System.Threading.Tasks.Task{ErrorOr.ErrorOr{``1}}})">
            <summary>
            If the state of <paramref name="errorOr"/> is a value, the provided function <paramref name="onValue"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <typeparam name="TNextValue">The type of the result from invoking the <paramref name="onValue"/> function.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The function to execute if the state is a value.</param>
            <returns>The result from calling <paramref name="onValue"/> if state is value; otherwise the original errors.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ThenAsync``2(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            If the state of <paramref name="errorOr"/> is a value, the provided function <paramref name="onValue"/> is executed asynchronously and its result is returned.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <typeparam name="TNextValue">The type of the result from invoking the <paramref name="onValue"/> function.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="onValue">The function to execute if the state is a value.</param>
            <returns>The result from calling <paramref name="onValue"/> if state is value; otherwise the original errors.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ThenDoAsync``1(System.Threading.Tasks.Task{ErrorOr.ErrorOr{``0}},System.Func{``0,System.Threading.Tasks.Task})">
            <summary>
            If the state of <paramref name="errorOr"/> is a value, the provided <paramref name="action"/> is executed asynchronously.
            </summary>
            <typeparam name="TValue">The type of the underlying value in the <paramref name="errorOr"/>.</typeparam>
            <param name="errorOr">The <see cref="N:ErrorOr"/> instance.</param>
            <param name="action">The action to execute if the state is a value.</param>
            <returns>The original <paramref name="errorOr"/>.</returns>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ToErrorOr``1(``0)">
            <summary>
            Creates an <see cref="T:ErrorOr.ErrorOr`1"/> instance with the given <paramref name="value"/>.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ToErrorOr``1(ErrorOr.Error)">
            <summary>
            Creates an <see cref="T:ErrorOr.ErrorOr`1"/> instance with the given <paramref name="error"/>.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOrExtensions.ToErrorOr``1(System.Collections.Generic.List{ErrorOr.Error})">
            <summary>
            Creates an <see cref="T:ErrorOr.ErrorOr`1"/> instance with the given <paramref name="error"/>.
            </summary>
        </member>
        <member name="T:ErrorOr.ErrorOrFactory">
            <summary>
            Provides factory methods for creating instances of <see cref="T:ErrorOr.ErrorOr`1"/>.
            </summary>
        </member>
        <member name="M:ErrorOr.ErrorOrFactory.From``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:ErrorOr.ErrorOr`1"/> with a value.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="value">The value to wrap.</param>
            <returns>An instance of <see cref="T:ErrorOr.ErrorOr`1"/> containing the provided value.</returns>
        </member>
        <member name="T:ErrorOr.ErrorType">
            <summary>
            Error types.
            </summary>
        </member>
        <member name="P:ErrorOr.IErrorOr`1.Value">
            <summary>
            Gets the value.
            </summary>
        </member>
        <member name="T:ErrorOr.IErrorOr">
            <summary>
            Type-less interface for the <see cref="N:ErrorOr"/> object.
            </summary>
            <remarks>
            This interface is intended for use when the underlying type of the <see cref="N:ErrorOr"/> object is unknown.
            </remarks>
        </member>
        <member name="P:ErrorOr.IErrorOr.Errors">
            <summary>
            Gets the list of errors.
            </summary>
        </member>
        <member name="P:ErrorOr.IErrorOr.IsError">
            <summary>
            Gets a value indicating whether the state is error.
            </summary>
        </member>
    </members>
</doc>
